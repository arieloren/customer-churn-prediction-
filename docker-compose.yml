version: "3.9"

services:
  # ─────────────────────────────────────────────────────────
  # 1️⃣  NEW – cAdvisor  (per-container CPU / MEM / NET / FS)
  # ─────────────────────────────────────────────────────────
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    container_name: cadvisor
    restart: unless-stopped
    ports: ["8080:8080"]
    volumes:
      - /:/rootfs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro

  # ─────────────────────────────────────────────────────────
  # 2️⃣  NEW – node-exporter (host-level CPU, RAM, Disk, etc.)
  # ─────────────────────────────────────────────────────────
  node-exporter:
    image: prom/node-exporter:v1.8.1
    container_name: node-exporter
    restart: unless-stopped
    ports: ["9100:9100"]
    command: [ "--path.rootfs=/host" ]
    volumes:
      - /:/host:ro

  # ----------------------------
  # Postgres – main application DB
  # ----------------------------
  db:
    image: postgres:16-alpine
    container_name: churn-db
    environment:
      POSTGRES_USER: churn
      POSTGRES_PASSWORD: churn_pwd
      POSTGRES_DB: churn_db
    ports: ["5432:5432"]
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ----------------------------
  # REST API (Flask) – churn predictions
  # ----------------------------
  churn-api:
    build:                   # ← use build OR image, not both
      context: .
      dockerfile: src/api/Dockerfile-api
    image: arieloren/churn-api:latest 
    container_name: churn-api
    depends_on:
      db:
        condition: service_healthy
    environment:
      DB_URI: postgresql://churn:churn_pwd@db:5432/churn_db
      PYTHONUNBUFFERED: "1"
    ports: ["9999:9999"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9999/predict"]
      interval: 20s
      timeout: 5s
      retries: 5

  # ----------------------------
  # Batch runner – daily job image
  # ----------------------------
  batch-runner:
    build:                   # ← again, pick build OR image
      context: .
      dockerfile: src/batch/Dockerfile-batch
    image: arieloren/churn-batch:latest 
    container_name: churn-batch
    depends_on:
      db:
        condition: service_healthy
    environment:
      DB_URI: postgresql://churn:churn_pwd@db:5432/churn_db
      PUSHGATEWAY_URL: pushgateway:9091
    volumes:
      - ./data:/app/data
      - ./outputs:/app/outputs
    entrypoint: []           # keep CMD from Dockerfile

  # ------------------------------------------------------------------
  # Prometheus Pushgateway
  # ------------------------------------------------------------------
  pushgateway:
    image: prom/pushgateway:v1.8.0
    container_name: pushgateway
    ports: ["9091:9091"]
    volumes:
      - pgwdata:/data
    command:
      - "--web.enable-admin-api"
      - "--persistence.file=/data/metrics"

  # ----------------------------
  # Prometheus – metrics scraper
  # ----------------------------
  prometheus:
    image: prom/prometheus:v2.52.0
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports: ["9090:9090"]
    depends_on:
      - churn-api
      - cadvisor
      - node-exporter
      - pushgateway       # optional but useful

  # ----------------------------
  # Grafana – dashboard frontend
  # ----------------------------
  grafana:
    image: grafana/grafana-oss:11.0.0
    container_name: grafana
    ports: ["3000:3000"]
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  pgdata:
  grafana-data:
  pgwdata:
